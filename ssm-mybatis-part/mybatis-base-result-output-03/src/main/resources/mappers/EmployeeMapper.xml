<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace == mapper接口类的全限定名 -->
<mapper namespace="com.boyan.mapper.EmployeeMapper">

    <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符 -->

    <!-- 场景 1. DML output - int / long 直接接收返回值，无需指定 resultType 返回值类型；-->
    <delete id="deleteById">
        delete from t_emp where emp_id = #{id}
    </delete>

    <!-- Query output - 根据查询对象各有不同，需要指定 resultType 返回值类型； -->

    <!-- 场景 2. 返回单个 简单类型  -->
    <select id="selectEmpCount" resultType="java.lang.Integer">
        select count(*) from t_emp
    </select>
    <select id="queryNameById" resultType="string">
        select emp_name from t_emp where emp_id = #{id}
    </select>

    <!-- 场景 3. 返回单个 实体类型  -->
    <select id="selectEmpById" resultType="com.boyan.pojo.Employee03">
        <!-- 问题：解决 数据库_命名 和 Java 驼峰式命名-->
        <!-- 方式1: 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 -->
        <!--select emp_id as empId, emp_name as empName, emp_salary as empSalary from t_emp where emp_id = #{empId}-->
        <!-- 方式2: 在 mybatis-config.xml 中设置全局变量 setting 自动映射命名 -->
        select * from t_emp where emp_id = #{empId}
    </select>

    <!-- 场景 4. 返回 Map<String, Object> 类型  -->
    <select id="selectEmpNameAndMaxSalary" resultType="map">
        SELECT
        emp_name,
        emp_salary,
        (SELECT AVG(emp_salary) FROM t_emp)
        FROM t_emp WHERE emp_salary=(
        SELECT MAX(emp_salary) FROM t_emp
        )
        <!-- 返回工资最高的员工的姓名和他的工资 -->
    </select>

    <!-- 场景 5. 返回 List<Object> 类型  -->
    <select id="selectAll" resultType="com.boyan.pojo.Employee03"> <!-- 此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可 -->
        select * from t_emp
    </select>

    <!--
    - 场景：主键回显（获取插入数据的主键）
    - 1 - 自增长类型主键 mysql auto_increment
    - 函数：实现员工插入，并返回新插入的员工实体的id
    -->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="empId">
        insert into t_emp(emp_name,emp_salary) values(#{empName},#{empSalary})
        <!-- 1 - useGeneratedKeys 属性字面意思就是“使用生成的主键” -> 自动生成一个主键插入到数据库(auto_increment) -->
        <!-- 2 - keyProperty 属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 -->
        <!-- ? - 传入的是 Employee 实体，如何对应 empName 和 empSalary 的？-->
    </insert>

    <!-- resultMap 标签初体验：先定义一个对应关系，再在后面的 SQL 语句中引用这个对应关系 -->
    <resultMap id="selectEmployeeByResultMap" type="com.boyan.pojo.Employee03">
        <!-- id 标签 - 设置主键列和主键属性之间的对应关系
                    - column 属性 - 用于指定字段名；
                    - property 属性 - 用于指定Java实体类属性名； -->
        <id column="emp_id" property="empId"/>

        <!-- baseResponse 标签 - 设置普通字段和Java实体类属性之间的关系 -->
        <baseResponse column="emp_name" property="empName"/>
        <baseResponse column="emp_salary" property="empSalary"/>
    </resultMap>
    <select id="selectEmployeeByRM" resultMap="selectEmployeeByResultMap">
        select emp_id,emp_name,emp_salary from t_emp where emp_id=#{empId}
    </select>

</mapper>